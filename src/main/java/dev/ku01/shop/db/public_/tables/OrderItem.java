/*
 * This file is generated by jOOQ.
 */
package dev.ku01.shop.db.public_.tables;


import dev.ku01.shop.db.public_.Keys;
import dev.ku01.shop.db.public_.Public;
import dev.ku01.shop.db.public_.tables.records.OrderItemRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderItem extends TableImpl<OrderItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order_item</code>
     */
    public static final OrderItem ORDER_ITEM = new OrderItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderItemRecord> getRecordType() {
        return OrderItemRecord.class;
    }

    /**
     * The column <code>public.order_item.order_id</code>.
     */
    public final TableField<OrderItemRecord, Integer> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.order_item.item_id</code>.
     */
    public final TableField<OrderItemRecord, Integer> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.order_item.quantity</code>. the count of the item
     * in the order
     */
    public final TableField<OrderItemRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "the count of the item in the order");

    /**
     * The column <code>public.order_item.amount</code>. quantity * price
     */
    public final TableField<OrderItemRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(19, 2).nullable(false), this, "quantity * price");

    private OrderItem(Name alias, Table<OrderItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderItem(Name alias, Table<OrderItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.order_item</code> table reference
     */
    public OrderItem(String alias) {
        this(DSL.name(alias), ORDER_ITEM);
    }

    /**
     * Create an aliased <code>public.order_item</code> table reference
     */
    public OrderItem(Name alias) {
        this(alias, ORDER_ITEM);
    }

    /**
     * Create a <code>public.order_item</code> table reference
     */
    public OrderItem() {
        this(DSL.name("order_item"), null);
    }

    public <O extends Record> OrderItem(Table<O> child, ForeignKey<O, OrderItemRecord> key) {
        super(child, key, ORDER_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OrderItemRecord> getPrimaryKey() {
        return Keys.ORDER_ITEM_ORDER_ID_ITEM_ID_PK;
    }

    @Override
    public List<ForeignKey<OrderItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDER_ITEM__ORDER_ITEM_ORDER_ID_FK, Keys.ORDER_ITEM__ORDER_ITEM_ITEM_ID_FK);
    }

    private transient Order _order;
    private transient Item _item;

    /**
     * Get the implicit join path to the <code>public.order</code> table.
     */
    public Order order() {
        if (_order == null)
            _order = new Order(this, Keys.ORDER_ITEM__ORDER_ITEM_ORDER_ID_FK);

        return _order;
    }

    /**
     * Get the implicit join path to the <code>public.item</code> table.
     */
    public Item item() {
        if (_item == null)
            _item = new Item(this, Keys.ORDER_ITEM__ORDER_ITEM_ITEM_ID_FK);

        return _item;
    }

    @Override
    public OrderItem as(String alias) {
        return new OrderItem(DSL.name(alias), this);
    }

    @Override
    public OrderItem as(Name alias) {
        return new OrderItem(alias, this);
    }

    @Override
    public OrderItem as(Table<?> alias) {
        return new OrderItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderItem rename(String name) {
        return new OrderItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderItem rename(Name name) {
        return new OrderItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderItem rename(Table<?> name) {
        return new OrderItem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
