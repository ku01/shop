/*
 * This file is generated by jOOQ.
 */
package dev.ku01.shop.db.public_.tables.records;


import dev.ku01.shop.db.public_.tables.Item;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemRecord extends UpdatableRecordImpl<ItemRecord> implements Record4<Integer, String, String, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.item.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.item.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.item.sku</code>.
     */
    public void setSku(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.item.sku</code>.
     */
    public String getSku() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.item.description</code>.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.item.description</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.item.price</code>.
     */
    public void setPrice(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.item.price</code>.
     */
    public BigDecimal getPrice() {
        return (BigDecimal) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, BigDecimal> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Item.ITEM.ID;
    }

    @Override
    public Field<String> field2() {
        return Item.ITEM.SKU;
    }

    @Override
    public Field<String> field3() {
        return Item.ITEM.DESCRIPTION;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Item.ITEM.PRICE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getSku();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public BigDecimal component4() {
        return getPrice();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getSku();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public BigDecimal value4() {
        return getPrice();
    }

    @Override
    public ItemRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ItemRecord value2(String value) {
        setSku(value);
        return this;
    }

    @Override
    public ItemRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public ItemRecord value4(BigDecimal value) {
        setPrice(value);
        return this;
    }

    @Override
    public ItemRecord values(Integer value1, String value2, String value3, BigDecimal value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ItemRecord
     */
    public ItemRecord() {
        super(Item.ITEM);
    }

    /**
     * Create a detached, initialised ItemRecord
     */
    public ItemRecord(Integer id, String sku, String description, BigDecimal price) {
        super(Item.ITEM);

        setId(id);
        setSku(sku);
        setDescription(description);
        setPrice(price);
        resetChangedOnNotNull();
    }
}
