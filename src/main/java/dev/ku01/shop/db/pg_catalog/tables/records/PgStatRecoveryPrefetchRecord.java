/*
 * This file is generated by jOOQ.
 */
package dev.ku01.shop.db.pg_catalog.tables.records;


import dev.ku01.shop.db.pg_catalog.tables.PgStatRecoveryPrefetch;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatRecoveryPrefetchRecord extends TableRecordImpl<PgStatRecoveryPrefetchRecord> implements Record10<OffsetDateTime, Long, Long, Long, Long, Long, Long, Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.stats_reset</code>.
     */
    public void setStatsReset(OffsetDateTime value) {
        set(0, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.stats_reset</code>.
     */
    public OffsetDateTime getStatsReset() {
        return (OffsetDateTime) get(0);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.prefetch</code>.
     */
    public void setPrefetch(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.prefetch</code>.
     */
    public Long getPrefetch() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.hit</code>.
     */
    public void setHit(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.hit</code>.
     */
    public Long getHit() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_init</code>.
     */
    public void setSkipInit(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_init</code>.
     */
    public Long getSkipInit() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_new</code>.
     */
    public void setSkipNew(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_new</code>.
     */
    public Long getSkipNew() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_fpw</code>.
     */
    public void setSkipFpw(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_fpw</code>.
     */
    public Long getSkipFpw() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_rep</code>.
     */
    public void setSkipRep(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.skip_rep</code>.
     */
    public Long getSkipRep() {
        return (Long) get(6);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_recovery_prefetch.wal_distance</code>.
     */
    public void setWalDistance(Integer value) {
        set(7, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_recovery_prefetch.wal_distance</code>.
     */
    public Integer getWalDistance() {
        return (Integer) get(7);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_recovery_prefetch.block_distance</code>.
     */
    public void setBlockDistance(Integer value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_recovery_prefetch.block_distance</code>.
     */
    public Integer getBlockDistance() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_recovery_prefetch.io_depth</code>.
     */
    public void setIoDepth(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_recovery_prefetch.io_depth</code>.
     */
    public Integer getIoDepth() {
        return (Integer) get(9);
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<OffsetDateTime, Long, Long, Long, Long, Long, Long, Integer, Integer, Integer> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<OffsetDateTime, Long, Long, Long, Long, Long, Long, Integer, Integer, Integer> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<OffsetDateTime> field1() {
        return PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH.STATS_RESET;
    }

    @Override
    public Field<Long> field2() {
        return PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH.PREFETCH;
    }

    @Override
    public Field<Long> field3() {
        return PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH.HIT;
    }

    @Override
    public Field<Long> field4() {
        return PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH.SKIP_INIT;
    }

    @Override
    public Field<Long> field5() {
        return PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH.SKIP_NEW;
    }

    @Override
    public Field<Long> field6() {
        return PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH.SKIP_FPW;
    }

    @Override
    public Field<Long> field7() {
        return PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH.SKIP_REP;
    }

    @Override
    public Field<Integer> field8() {
        return PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH.WAL_DISTANCE;
    }

    @Override
    public Field<Integer> field9() {
        return PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH.BLOCK_DISTANCE;
    }

    @Override
    public Field<Integer> field10() {
        return PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH.IO_DEPTH;
    }

    @Override
    public OffsetDateTime component1() {
        return getStatsReset();
    }

    @Override
    public Long component2() {
        return getPrefetch();
    }

    @Override
    public Long component3() {
        return getHit();
    }

    @Override
    public Long component4() {
        return getSkipInit();
    }

    @Override
    public Long component5() {
        return getSkipNew();
    }

    @Override
    public Long component6() {
        return getSkipFpw();
    }

    @Override
    public Long component7() {
        return getSkipRep();
    }

    @Override
    public Integer component8() {
        return getWalDistance();
    }

    @Override
    public Integer component9() {
        return getBlockDistance();
    }

    @Override
    public Integer component10() {
        return getIoDepth();
    }

    @Override
    public OffsetDateTime value1() {
        return getStatsReset();
    }

    @Override
    public Long value2() {
        return getPrefetch();
    }

    @Override
    public Long value3() {
        return getHit();
    }

    @Override
    public Long value4() {
        return getSkipInit();
    }

    @Override
    public Long value5() {
        return getSkipNew();
    }

    @Override
    public Long value6() {
        return getSkipFpw();
    }

    @Override
    public Long value7() {
        return getSkipRep();
    }

    @Override
    public Integer value8() {
        return getWalDistance();
    }

    @Override
    public Integer value9() {
        return getBlockDistance();
    }

    @Override
    public Integer value10() {
        return getIoDepth();
    }

    @Override
    public PgStatRecoveryPrefetchRecord value1(OffsetDateTime value) {
        setStatsReset(value);
        return this;
    }

    @Override
    public PgStatRecoveryPrefetchRecord value2(Long value) {
        setPrefetch(value);
        return this;
    }

    @Override
    public PgStatRecoveryPrefetchRecord value3(Long value) {
        setHit(value);
        return this;
    }

    @Override
    public PgStatRecoveryPrefetchRecord value4(Long value) {
        setSkipInit(value);
        return this;
    }

    @Override
    public PgStatRecoveryPrefetchRecord value5(Long value) {
        setSkipNew(value);
        return this;
    }

    @Override
    public PgStatRecoveryPrefetchRecord value6(Long value) {
        setSkipFpw(value);
        return this;
    }

    @Override
    public PgStatRecoveryPrefetchRecord value7(Long value) {
        setSkipRep(value);
        return this;
    }

    @Override
    public PgStatRecoveryPrefetchRecord value8(Integer value) {
        setWalDistance(value);
        return this;
    }

    @Override
    public PgStatRecoveryPrefetchRecord value9(Integer value) {
        setBlockDistance(value);
        return this;
    }

    @Override
    public PgStatRecoveryPrefetchRecord value10(Integer value) {
        setIoDepth(value);
        return this;
    }

    @Override
    public PgStatRecoveryPrefetchRecord values(OffsetDateTime value1, Long value2, Long value3, Long value4, Long value5, Long value6, Long value7, Integer value8, Integer value9, Integer value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PgStatRecoveryPrefetchRecord
     */
    public PgStatRecoveryPrefetchRecord() {
        super(PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH);
    }

    /**
     * Create a detached, initialised PgStatRecoveryPrefetchRecord
     */
    public PgStatRecoveryPrefetchRecord(OffsetDateTime statsReset, Long prefetch, Long hit, Long skipInit, Long skipNew, Long skipFpw, Long skipRep, Integer walDistance, Integer blockDistance, Integer ioDepth) {
        super(PgStatRecoveryPrefetch.PG_STAT_RECOVERY_PREFETCH);

        setStatsReset(statsReset);
        setPrefetch(prefetch);
        setHit(hit);
        setSkipInit(skipInit);
        setSkipNew(skipNew);
        setSkipFpw(skipFpw);
        setSkipRep(skipRep);
        setWalDistance(walDistance);
        setBlockDistance(blockDistance);
        setIoDepth(ioDepth);
        resetChangedOnNotNull();
    }
}
