/*
 * This file is generated by jOOQ.
 */
package dev.ku01.shop.db.pg_catalog.tables.records;


import dev.ku01.shop.db.pg_catalog.tables.PgSubscription;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record17;
import org.jooq.Row17;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgSubscriptionRecord extends UpdatableRecordImpl<PgSubscriptionRecord> implements Record17<Long, Long, Object, String, Long, Boolean, Boolean, String, String, Boolean, Boolean, Boolean, String, String, String, String[], String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pg_catalog.pg_subscription.oid</code>.
     */
    public void setOid(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.oid</code>.
     */
    public Long getOid() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subdbid</code>.
     */
    public void setSubdbid(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subdbid</code>.
     */
    public Long getSubdbid() {
        return (Long) get(1);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public void setSubskiplsn(Object value) {
        set(2, value);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public Object getSubskiplsn() {
        return get(2);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subname</code>.
     */
    public void setSubname(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subname</code>.
     */
    public String getSubname() {
        return (String) get(3);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subowner</code>.
     */
    public void setSubowner(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subowner</code>.
     */
    public Long getSubowner() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subenabled</code>.
     */
    public void setSubenabled(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subenabled</code>.
     */
    public Boolean getSubenabled() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subbinary</code>.
     */
    public void setSubbinary(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subbinary</code>.
     */
    public Boolean getSubbinary() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.substream</code>.
     */
    public void setSubstream(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.substream</code>.
     */
    public String getSubstream() {
        return (String) get(7);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subtwophasestate</code>.
     */
    public void setSubtwophasestate(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subtwophasestate</code>.
     */
    public String getSubtwophasestate() {
        return (String) get(8);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subdisableonerr</code>.
     */
    public void setSubdisableonerr(Boolean value) {
        set(9, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subdisableonerr</code>.
     */
    public Boolean getSubdisableonerr() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subpasswordrequired</code>.
     */
    public void setSubpasswordrequired(Boolean value) {
        set(10, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subpasswordrequired</code>.
     */
    public Boolean getSubpasswordrequired() {
        return (Boolean) get(10);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subrunasowner</code>.
     */
    public void setSubrunasowner(Boolean value) {
        set(11, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subrunasowner</code>.
     */
    public Boolean getSubrunasowner() {
        return (Boolean) get(11);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subconninfo</code>.
     */
    public void setSubconninfo(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subconninfo</code>.
     */
    public String getSubconninfo() {
        return (String) get(12);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subslotname</code>.
     */
    public void setSubslotname(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subslotname</code>.
     */
    public String getSubslotname() {
        return (String) get(13);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subsynccommit</code>.
     */
    public void setSubsynccommit(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subsynccommit</code>.
     */
    public String getSubsynccommit() {
        return (String) get(14);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.subpublications</code>.
     */
    public void setSubpublications(String[] value) {
        set(15, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.subpublications</code>.
     */
    public String[] getSubpublications() {
        return (String[]) get(15);
    }

    /**
     * Setter for <code>pg_catalog.pg_subscription.suborigin</code>.
     */
    public void setSuborigin(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_subscription.suborigin</code>.
     */
    public String getSuborigin() {
        return (String) get(16);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record17 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, Long, Object, String, Long, Boolean, Boolean, String, String, Boolean, Boolean, Boolean, String, String, String, String[], String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    @Override
    public Row17<Long, Long, Object, String, Long, Boolean, Boolean, String, String, Boolean, Boolean, Boolean, String, String, String, String[], String> valuesRow() {
        return (Row17) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return PgSubscription.PG_SUBSCRIPTION.OID;
    }

    @Override
    public Field<Long> field2() {
        return PgSubscription.PG_SUBSCRIPTION.SUBDBID;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    @Override
    public Field<Object> field3() {
        return PgSubscription.PG_SUBSCRIPTION.SUBSKIPLSN;
    }

    @Override
    public Field<String> field4() {
        return PgSubscription.PG_SUBSCRIPTION.SUBNAME;
    }

    @Override
    public Field<Long> field5() {
        return PgSubscription.PG_SUBSCRIPTION.SUBOWNER;
    }

    @Override
    public Field<Boolean> field6() {
        return PgSubscription.PG_SUBSCRIPTION.SUBENABLED;
    }

    @Override
    public Field<Boolean> field7() {
        return PgSubscription.PG_SUBSCRIPTION.SUBBINARY;
    }

    @Override
    public Field<String> field8() {
        return PgSubscription.PG_SUBSCRIPTION.SUBSTREAM;
    }

    @Override
    public Field<String> field9() {
        return PgSubscription.PG_SUBSCRIPTION.SUBTWOPHASESTATE;
    }

    @Override
    public Field<Boolean> field10() {
        return PgSubscription.PG_SUBSCRIPTION.SUBDISABLEONERR;
    }

    @Override
    public Field<Boolean> field11() {
        return PgSubscription.PG_SUBSCRIPTION.SUBPASSWORDREQUIRED;
    }

    @Override
    public Field<Boolean> field12() {
        return PgSubscription.PG_SUBSCRIPTION.SUBRUNASOWNER;
    }

    @Override
    public Field<String> field13() {
        return PgSubscription.PG_SUBSCRIPTION.SUBCONNINFO;
    }

    @Override
    public Field<String> field14() {
        return PgSubscription.PG_SUBSCRIPTION.SUBSLOTNAME;
    }

    @Override
    public Field<String> field15() {
        return PgSubscription.PG_SUBSCRIPTION.SUBSYNCCOMMIT;
    }

    @Override
    public Field<String[]> field16() {
        return PgSubscription.PG_SUBSCRIPTION.SUBPUBLICATIONS;
    }

    @Override
    public Field<String> field17() {
        return PgSubscription.PG_SUBSCRIPTION.SUBORIGIN;
    }

    @Override
    public Long component1() {
        return getOid();
    }

    @Override
    public Long component2() {
        return getSubdbid();
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    @Override
    public Object component3() {
        return getSubskiplsn();
    }

    @Override
    public String component4() {
        return getSubname();
    }

    @Override
    public Long component5() {
        return getSubowner();
    }

    @Override
    public Boolean component6() {
        return getSubenabled();
    }

    @Override
    public Boolean component7() {
        return getSubbinary();
    }

    @Override
    public String component8() {
        return getSubstream();
    }

    @Override
    public String component9() {
        return getSubtwophasestate();
    }

    @Override
    public Boolean component10() {
        return getSubdisableonerr();
    }

    @Override
    public Boolean component11() {
        return getSubpasswordrequired();
    }

    @Override
    public Boolean component12() {
        return getSubrunasowner();
    }

    @Override
    public String component13() {
        return getSubconninfo();
    }

    @Override
    public String component14() {
        return getSubslotname();
    }

    @Override
    public String component15() {
        return getSubsynccommit();
    }

    @Override
    public String[] component16() {
        return getSubpublications();
    }

    @Override
    public String component17() {
        return getSuborigin();
    }

    @Override
    public Long value1() {
        return getOid();
    }

    @Override
    public Long value2() {
        return getSubdbid();
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    @Override
    public Object value3() {
        return getSubskiplsn();
    }

    @Override
    public String value4() {
        return getSubname();
    }

    @Override
    public Long value5() {
        return getSubowner();
    }

    @Override
    public Boolean value6() {
        return getSubenabled();
    }

    @Override
    public Boolean value7() {
        return getSubbinary();
    }

    @Override
    public String value8() {
        return getSubstream();
    }

    @Override
    public String value9() {
        return getSubtwophasestate();
    }

    @Override
    public Boolean value10() {
        return getSubdisableonerr();
    }

    @Override
    public Boolean value11() {
        return getSubpasswordrequired();
    }

    @Override
    public Boolean value12() {
        return getSubrunasowner();
    }

    @Override
    public String value13() {
        return getSubconninfo();
    }

    @Override
    public String value14() {
        return getSubslotname();
    }

    @Override
    public String value15() {
        return getSubsynccommit();
    }

    @Override
    public String[] value16() {
        return getSubpublications();
    }

    @Override
    public String value17() {
        return getSuborigin();
    }

    @Override
    public PgSubscriptionRecord value1(Long value) {
        setOid(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value2(Long value) {
        setSubdbid(value);
        return this;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    @Override
    public PgSubscriptionRecord value3(Object value) {
        setSubskiplsn(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value4(String value) {
        setSubname(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value5(Long value) {
        setSubowner(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value6(Boolean value) {
        setSubenabled(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value7(Boolean value) {
        setSubbinary(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value8(String value) {
        setSubstream(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value9(String value) {
        setSubtwophasestate(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value10(Boolean value) {
        setSubdisableonerr(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value11(Boolean value) {
        setSubpasswordrequired(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value12(Boolean value) {
        setSubrunasowner(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value13(String value) {
        setSubconninfo(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value14(String value) {
        setSubslotname(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value15(String value) {
        setSubsynccommit(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value16(String[] value) {
        setSubpublications(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord value17(String value) {
        setSuborigin(value);
        return this;
    }

    @Override
    public PgSubscriptionRecord values(Long value1, Long value2, Object value3, String value4, Long value5, Boolean value6, Boolean value7, String value8, String value9, Boolean value10, Boolean value11, Boolean value12, String value13, String value14, String value15, String[] value16, String value17) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PgSubscriptionRecord
     */
    public PgSubscriptionRecord() {
        super(PgSubscription.PG_SUBSCRIPTION);
    }

    /**
     * Create a detached, initialised PgSubscriptionRecord
     */
    public PgSubscriptionRecord(Long oid, Long subdbid, Object subskiplsn, String subname, Long subowner, Boolean subenabled, Boolean subbinary, String substream, String subtwophasestate, Boolean subdisableonerr, Boolean subpasswordrequired, Boolean subrunasowner, String subconninfo, String subslotname, String subsynccommit, String[] subpublications, String suborigin) {
        super(PgSubscription.PG_SUBSCRIPTION);

        setOid(oid);
        setSubdbid(subdbid);
        setSubskiplsn(subskiplsn);
        setSubname(subname);
        setSubowner(subowner);
        setSubenabled(subenabled);
        setSubbinary(subbinary);
        setSubstream(substream);
        setSubtwophasestate(subtwophasestate);
        setSubdisableonerr(subdisableonerr);
        setSubpasswordrequired(subpasswordrequired);
        setSubrunasowner(subrunasowner);
        setSubconninfo(subconninfo);
        setSubslotname(subslotname);
        setSubsynccommit(subsynccommit);
        setSubpublications(subpublications);
        setSuborigin(suborigin);
        resetChangedOnNotNull();
    }
}
